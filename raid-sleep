#!/usr/bin/env python3
#
import re
import os
import argparse
import time
import textwrap
from subprocess import Popen, PIPE
from psutil import disk_io_counters
from os import listdir
from os.path import islink, join


def parse_args():
    global args

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''\
            Power down RAID disks after a specified timeout
            Copyright (c)2015-2018 Thomas Kindler <mail+git@t-kindler.de>

            %(prog)s comes with ABSOLUTELY NO WARRANTY. This is free software,
            and you are welcome to redistribute it under certain conditions.
            See the GNU General Public Licence version 3 (or later) for details.       
        ''')
    )

    parser.add_argument(
        "--version", action="version",
        version="%(prog)s 1.1.0"
    )

    parser.add_argument(
        "-q", "--quiet", dest="verbose",
        default=True, action="store_false",
        help="do not print status messages",
    )

    parser.add_argument(
        "-t", "--timeout", dest="timeout",
        default=1800, type=int,
        help="standby timeout in seconds (default: %(default)s)"
    )

    parser.add_argument(
        "disk", nargs="+",
        help="Disks to monitor"
    )

    args = parser.parse_args()

    args.block_devs = [os.path.realpath(d) for d in args.disk]
    args.disk_devs = set()

    for d in args.block_devs:
        dn = re.search( "[^/]+$", d ).group()
        # RAID device /dev/md[0-9]
        if re.search("^md[0-9]+$", dn):
            # Find slave partitions in sysfs
            syspath = "/sys/block/%s/slaves" % dn
            slaves = [s for s in listdir(syspath) if islink(join(syspath, s))]
            # Find drives for slave partitions
            slaves = [re.search("^[^0-9]+", s).group() for s in slaves]
            # Prepend /dev/
            slaves = ["/dev/%s" % s for s in slaves]
            args.disk_devs.update(slaves)
        # Partition /dev/sd[a-z][0-9]
        elif re.search("^sd[a-z][0-9]+$", dn):
            disk = "/dev/%s" % re.search("^[^0-9]+", dn).group()
            args.disk_devs.add(disk)
        # Disk /dev/sd[a-z]
        else:
            args.disk_devs.add("/dev/%s" % dn)


def dprint(*message):
    if args.verbose:
        for s in message:
            print(s, end=" ")
        print()


def power_down():
    # hdparm may take a long time, so execute in parallel
    #
    for p in [
        Popen(["hdparm", "-y", d], stdout=PIPE)
        for d in args.disk_devs
    ]:
        p.wait()


def wake_up():
    for p in [
        Popen(["hdparm", "--read-sector", "0", d], stdout=PIPE)
        for d in args.disk_devs
    ]:
        p.wait()


def diskstats():
    result = {}
    ios = disk_io_counters(perdisk=True)

    for dev in args.block_devs:
        dev = os.path.basename(dev)
        result[dev] = str(ios[dev].read_bytes) + " " + str(ios[dev].write_bytes)

    return result


def hms(s):
    return "%d:%02d:%02d" % (s / 3600, s / 60 % 60, s % 60)


# ----- ----- ----- ----- -----

old_stats = None
last_access = time.time()
last_standby = last_access
disk_state = 1

parse_args()

dprint(
    "Monitoring %s using disks %s. Timeout = %s" % (
        ", ".join(args.block_devs), ", ".join(args.disk_devs), hms(args.timeout)
    )
)

while True:
    stats = diskstats()

    now = time.time()

    if old_stats and old_stats != stats:
        if disk_state == 0:
            disk_state = 1
            last_standby = now

            dprint("Waking up after %s of inactivity" % hms(now - last_access))
            wake_up()

        last_access = now

    #inactivity = int(now - last_access)
    #if (inactivity % 60) == 0:
    #    dprint("Inactivity for %s" % hms(inactivity))

    if now - last_access > args.timeout:
        if disk_state == 1:
            disk_state = 0

            dprint("Powering down after %s" % hms(now - last_standby))
            power_down()
            # sleep or the disks are woken up during the next cycle
            time.sleep(5)
            stats = diskstats()

    old_stats = stats
    time.sleep(1)
